---
layout: post
title: "'It is an amazing time to be studying Computer Science - it's kinda like studying Maths in Ancient Greece'"
date: 2020-05-24
---

<p>The post title is a quote by Chris Piech - a Stanford professor. It was something said by him in an introductory Zoom meeting for the section leaders of Stanford's CS106A - Code in Place online course. I was very lucky to be one of those:</p>

<iframe src="https://www.linkedin.com/embed/feed/update/urn:li:share:6653334788939796480" allowfullscreen="" title="Embedded post" width="504" height="426" frameborder="0"></iframe>

<p>So, what Chris meant was that, for example, Pythagoras created something that serves as a basis to build upon centuries later and students are still learning it today. This is the current state of Computer Science - people will be learning about the magnificent discoveries of today for a long time to come!</p>
<p>Following the end of the course, the other professor behind it - Ali Malik - shared a roadmap for where to go on from here. It is the result of a shared effort of the people behind the course and guides students on how to proceed after the start in their Computer Science journey. I've been reposting it left and right (with permission) as I think it is an amazing resource!</p>

<p>I'm not sure if this blog will ever become popular - for now, I'm just using it as a <em>public diary</em> - I'm writing mainly for myself, and if anyone happens to stumble upon this, well, that's cool! And so I figured - I might as well share it here too. I know I definitely plan to use some of the resources mentioned.</p>

<p>Therefore, this is yet another repost of Ali's guide! As I wouldn't like to edit it, I am presenting it word by word. This means there are lots of references to the Code in Place course. Nevertheless, I think the roadmap is also applicable to anyone that has taken any other introductory computer science course, such as Harvard's CS50. Just replace in your head the <em>Code in Place </em>with <em>my first programming course</em>. And start feeling as if you are in Ancient Greece!</p>

<h2>Life after Code in Place</h2>

<p>Having completed Code In Place, there are many paths you might choose to take: this handout is intended to provide a possible roadmap for some of them. Like all guidelines, this is an approximate and non-exhaustive list on how to learn about a subject. There are a plethora different ways to achieve mastery that might not be represented here.</p>

<p>We have split up this resource into umbrella topics that students have been asking about. In reality, there are a lot more ways to apply Computer Science, such as music, healthcare, social good and education.</p>

<p>Each area has a list of <strong>core topics</strong> you need to understand to engage with meaningfully with that discipline. After you develop a solid understanding of these core topics, you can pick and choose whatever subareas you find interesting and focus there.</p>
<p>If there is any topic not covered here that you are interested in, ask about it in the comments! We will try to answer those as well.</p>

<h3><strong>How to use this resource</strong>:</h3>
<p>Since we can’t cover the vast range of possible material in the world, most of the resources linked below are websites of university courses that cover the relevant concept. <strong><em>This doesn’t mean you have to take the academic course to learn that material</em></strong>. Instead, the course syllabus can serve as a reference point for which topics are important to cover. You can then go about actually learning these topics however you want. Some potential ways to learn could be to search for the topic on google or youtube, read textbooks, or browse reddit.</p>

<h2>Foundations of CS</h2>

<p>These are major concepts that are important to solidify, irrespective of what area of CS you are interested in. It consists of all the foundational concepts: programs, variables, loops, conditions, data structures, and core algorithms.</p>

<p><strong>CS106A:</strong></p>

<p>You have done most of this! Congrats :)</p>

<p><strong>CS106B:</strong></p>
<p>Stanford’s sequel class to CS 106A. In CS 106B, you further develop your toolkit by deepening your understanding of how a computer represents data and learning about additional problem-solving techniques and structures. The class is taught in C++, one of the most popular programming languages in history.</p>
<p><em>Course website</em>: <a href="http://web.stanford.edu/class/cs106b/" target="_blank" rel="noreferrer noopener">http://web.stanford.edu/class/cs106b/</a></p>

<p><em>Old recorded lectures</em>: <a rel="noreferrer noopener" href="https://see.stanford.edu/Course" target="_blank">https://see.stanford.edu/Course</a></p>

<h2>Area Specific Paths</h2>

<h3>Data Science, AI, and ML</h3>

<p><strong>Core</strong>:</p>

<ul><li>Probability and Statistics (<a href="http://web.stanford.edu/class/archive/cs/cs109/cs109.1196/" target="_blank" rel="noreferrer noopener">CS109</a>)</li><li>Data science with numpy and matplotlib (<a href="http://web.stanford.edu/class/cs102/" target="_blank" rel="noreferrer noopener">CS102</a>, <a href="http://cs109.github.io/2015/index.html" target="_blank" rel="noreferrer noopener">Harvard Data Science</a>)</li><li>Linear algebra and Multivariable Calculus (<a href="https://www.coursera.org/specializations/mathematics-machine-learning" target="_blank" rel="noreferrer noopener">Mathematics for Machine Learning</a>, <a href="https://www.youtube.com/watch?v=fNk_zzaMoSs&amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab" target="_blank" rel="noreferrer noopener">3b1b Linear Algebra</a>, <a href="https://www.youtube.com/watch?v=WUvTyaaNkzM&amp;list=PLZHQObOWTQDMsr9K-rj53DwVRMYO3t5Yr" target="_blank" rel="noreferrer noopener">3b1b Calculus</a>, <a href="https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/" target="_blank" rel="noreferrer noopener">MIT18.06</a>, <a href="https://www.youtube.com/channel/UCGVa4wp8SWGFtMe6hcdpHlg/playlists" target="_blank" rel="noreferrer noopener">Coding the Matrix</a>)</li></ul>

<p><strong>AI/ML</strong>:</p>

<ul><li>Machine learning (<a rel="noreferrer noopener" href="http://cs231n.stanford.edu/" target="_blank">CS231N</a>, <a rel="noreferrer noopener" href="https://www.coursera.org/learn/machine-learning" target="_blank">CS229</a>)</li><li>Natural language processing (<a rel="noreferrer noopener" href="http://web.stanford.edu/class/cs124/" target="_blank">CS124</a>, <a rel="noreferrer noopener" href="http://web.stanford.edu/class/cs224n/" target="_blank">CS224N</a>)</li><li>Computer vision (<a rel="noreferrer noopener" href="http://cs231n.stanford.edu/" target="_blank">CS231N</a>)</li><li>Reinforcement learning (<a rel="noreferrer noopener" href="http://web.stanford.edu/class/cs234/index.html" target="_blank">CS234</a>)</li></ul>

<h3>Systems</h3>
<p><strong>Core</strong>:</p>

<ul><li>Computer Architecture and Systems (CS107 <a href="http://web.stanford.edu/class/cs107/" target="_blank" rel="noreferrer noopener">website</a> and <a href="https://see.stanford.edu/Course" target="_blank" rel="noreferrer noopener">videos</a>)</li><li>Principles of Systems (<a href="http://web.stanford.edu/class/cs110/" target="_blank" rel="noreferrer noopener">CS110</a>)</li></ul>

<h3>Graphics/Game Design/VR</h3>

<p><strong>Core</strong>:</p>

<ul><li>Linear algebra and Multivariable Calculus (<a href="https://www.coursera.org/specializations/mathematics-machine-learning" target="_blank" rel="noreferrer noopener">Mathematics for Machine Learning</a>,<a href="https://www.youtube.com/watch?v=fNk_zzaMoSs&amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab" target="_blank" rel="noreferrer noopener">3b1b Linear Algebra</a>, <a href="https://www.youtube.com/watch?v=WUvTyaaNkzM&amp;list=PLZHQObOWTQDMsr9K-rj53DwVRMYO3t5Yr" target="_blank" rel="noreferrer noopener">3b1b Calculus</a>, <a href="https://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/" target="_blank" rel="noreferrer noopener">MIT18.06</a>, <a href="https://www.youtube.com/channel/UCGVa4wp8SWGFtMe6hcdpHlg/playlists" target="_blank" rel="noreferrer noopener">Coding the Matrix</a>)</li><li>Core physics (mechanics, differential equations)</li></ul>

<p><strong>Areas:</strong></p>

<ul><li>2D/3D Graphics, rendering, animation, geometry (<a href="http://cs248.stanford.edu/winter20/" target="_blank" rel="noreferrer noopener">CS248</a>)</li><li>Virtual Reality (<a href="https://stanford.edu/class/ee267/" target="_blank" rel="noreferrer noopener">EE267</a>)</li><li>Animation and Simulation (<a href="http://graphics.stanford.edu/courses/cs348c/" target="_blank" rel="noreferrer noopener">CS348C</a>)</li><li>Introduction to Game Design and Development (<a href="https://stanfordgamedev.weebly.com/" target="_blank" rel="noreferrer noopener">CS146</a>)</li></ul>

<h3>Web dev (frontend/backend)</h3>
<p>Web development is how we make websites and online applications to do useful things. It consists of two major areas.</p>

<p><strong>Frontend</strong>: This deals with everything related to what a website user can see and interact with such as the design, style, menus, text, images, etc.</p>
<p><strong>Backend</strong>: This deals with everything that has to do with all the logic and internal working of a website that is not typically visible to a user. This is stuff like storing data in databases, making a server, authentication, creating users, generating dynamic pages, etc.</p>

<p>These resources will generally cover both frontend (HTML, CSS, javascript) andbackend programming:</p>

<ul><li><a href="https://developer.mozilla.org/en-US/docs/Learn" target="_blank" rel="noreferrer noopener">Mozilla: Learn Web Development</a></li><li><a href="https://www.theodinproject.com/home" target="_blank" rel="noreferrer noopener">The Odin Project</a></li><li><a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world" target="_blank" rel="noreferrer noopener">The Flask Mega Tutorial</a></li></ul>

<h3>Mobile dev</h3>

<ul><li>iPhone: any Swift resources provided by <a href="https://developer.apple.com/swift/" target="_blank" rel="noreferrer noopener">Apple</a></li><li>Android: any Kotlin resources provided by <a href="https://developer.android.com/courses" target="_blank" rel="noreferrer noopener">Google</a></li></ul>

<h2>General Resources</h2>

<h3>Programming Tools</h3>

<ul><li>One of the most wonderful things about the field of Computer Science is how collaborative and open a field it is. This is enabled by websites like <a href="https://github.com/" target="_blank" rel="noreferrer noopener">Github</a>, <a href="https://about.gitlab.com/" target="_blank" rel="noreferrer noopener">GitLab</a> and <a href="https://bitbucket.org/product" target="_blank" rel="noreferrer noopener">BitBucket</a>, in which programmers can share and work together on their code. Underlying each of these websites is a system called Git, which allows you to manage the different versions of your program with minimal fuss. Learn the basics of Git using <a href="https://try.github.io/" target="_blank" rel="noreferrer noopener">Github’s tutorial</a>, or <a href="https://www.atlassian.com/git" target="_blank" rel="noreferrer noopener">BitBucket’s help center</a>. Some SLs wrote up really great intros to Github. See this <a href="https://us.edstem.org/courses/490/discussion/71024" target="_blank" rel="noreferrer noopener">ed post</a> and this other <a href="https://www.youtube.com/watch?v=umvKOaRWz-A" target="_blank" rel="noreferrer noopener">video</a>!</li><li>In addition to PyCharm and Ed, there are countless other editors and IDEs, each with their own strengths and which can be customized for your purposes. Two of the most popular editors are <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer noopener">Visual Studio Code</a> and <a href="https://www.sublimetext.com/" target="_blank" rel="noreferrer noopener">Sublime Text</a>.</li><li>As you work on projects of your own, you are bound to run into bugs. <a href="https://stackoverflow.com/" target="_blank" rel="noreferrer noopener">Stack Overflow</a> is a question &amp; answer forum that is probably the single best resource on the internet to get advice on resolving bugs.</li></ul>

<h3>Other Programming Languages</h3>

<p>Python is a wonderful language, but there are many other wonderful languages you might be interested in learning:</p>

<ul><li>HTML, CSS and Javascript are the best tools for developing internet-based application. Mozilla’s <a href="https://developer.mozilla.org/en-US/docs/Learn" target="_blank" rel="noreferrer noopener">resources</a> are a fantastic introduction.</li><li>C and C++ are two of the most commonly used programming languages, and are great for programmers who want more direct control over what their computers are doing. You can learn C++ from a combination of <a href="http://cs106b.stanford.edu/" target="_blank" rel="noreferrer noopener">CS 106B</a> and <a href="http://web.stanford.edu/class/archive/cs/cs106l/cs106l.1192/" target="_blank" rel="noreferrer noopener">CS 106L</a>, and you could learn C <a href="https://www.learn-c.org/" target="_blank" rel="noreferrer noopener">here</a>.</li><li>Rust is a more recent language that also affords programmers very low-level control of their computers.</li><li><a href="https://www.codecademy.com/learn/learn-java" target="_blank" rel="noreferrer noopener">Java</a> and <a href="https://tour.golang.org/welcome/1" target="_blank" rel="noreferrer noopener">Go</a> are great choices to build systems that must handle large amounts of data.</li><li><a href="http://learnyouahaskell.com/introduction" target="_blank" rel="noreferrer noopener">Haskell</a>, <a href="https://docs.scala-lang.org/learn.html" target="_blank" rel="noreferrer noopener">Scala</a>, and <a href="https://ocaml.org/learn/tutorials/" target="_blank" rel="noreferrer noopener">OCaml</a> are programming languages that promote a style of programming known as functional programming, which often is enormously helpful in processing data and is a fascinating intellectual endeavour.</li></ul>

<h3>Tech Interviews</h3>

<p>Interviews for tech internships and jobs are kind of their own skill that really gets better with practice. These are some good resources to practice for tech job interviews. Remember, you don't want to be memorising these answers. Instead you want to develop your computational thinking so that you can figure out these answers on the spot!</p>

<ul><li><a href="https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X" target="_blank" rel="noreferrer noopener">Cracking the Coding Interview</a></li><li><a href="https://www.hackerrank.com/domains/algorithms" target="_blank" rel="noreferrer noopener">Hackerrank</a></li></ul>

<h2>Collection of Resources by SLs</h2>

<p>These are a collection of various resources contributed by the section leaders of Code in Place. They aren’t structured in any particular way but they might serve as a useful reference for you!</p>

<ul><li>Great answer by a section leader: <a href="https://us.edstem.org/courses/490/discussion/71967" target="_blank" rel="noreferrer noopener">https://us.edstem.org/courses/490/discussion/71967</a></li><li>Take a MOOC, such as <a href="https://see.stanford.edu/Course" target="_blank" rel="noreferrer noopener">CS106B and CS107</a>, or <a href="https://www.coursera.org/learn/machine-learning?utm_source=gg&amp;utm_medium=sem&amp;utm_content=07-StanfordML-US&amp;campaignid=685340575&amp;adgroupid=32639001781&amp;device=c&amp;keyword=machine%20learning%20tutorial&amp;matchtype=e&amp;network=g&amp;devicemodel=&amp;adpostion=&amp;creativeid=243289762754&amp;hide_mobile_promo&amp;gclid=CjwKCAjwnIr1BRAWEiwA6GpwNUqKjmT-1xa3cNeaocKYhj3_ZxszfBzVimQMwjwIw8miHi1zJH2NuRoCMHQQAvD_BwE" target="_blank" rel="noreferrer noopener">the Coursera version of CS 229</a> or Coursera’s <a href="https://www.coursera.org/specializations/deep-learning?utm_source=gg&amp;utm_medium=sem&amp;utm_content=07-StanfordML-US&amp;campaignid=685340575&amp;adgroupid=32639001781&amp;device=c&amp;keyword=machine%20learning%20tutorial&amp;matchtype=e&amp;network=g&amp;devicemodel=&amp;adpostion=&amp;creativeid=243289762754&amp;hide_mobile_promo=&amp;gclid=CjwKCAjwnIr1BRAWEiwA6GpwNUqKjmT-1xa3cNeaocKYhj3_ZxszfBzVimQMwjwIw8miHi1zJH2NuRoCMHQQAvD_BwE#courses" target="_blank" rel="noreferrer noopener">Deep Learning</a></li><li>More MOOCS: <a href="https://www.freecodecamp.org/news/free-courses-top-cs-universities/" target="_blank" rel="noreferrer noopener">list from Class Central</a></li><li>Try <a href="http://www.codewars.com" target="_blank" rel="noreferrer noopener">codewars.com</a> to learn more Python and other languages</li><li>Find a learning partner (in your section, or someone else in the class) so that you can help each other continue learning to code -- having peer/community support can help a lot! (It could help if a “partner-seeking” or “team-seeking” thread were posted on Ed for this purpose.)</li><li>Work through <a href="https://www.hackerrank.com/domains/algorithms" target="_blank" rel="noreferrer noopener">interview prep problems</a><ul><li>Hackerrank in general is great - it gently introduces Python concepts through simple problems, and also has non-Python Algorithm tests that are pretty difficult and interesting</li></ul></li><li>Build something cool!<ul><li>Glue existing libraries into useful software</li></ul></li><li>Completing <a href="https://www.udemy.com/course/complete-python-bootcamp/" target="_blank" rel="noreferrer noopener">Python bootcamp course</a> from Udemy</li><li>Subscribe to <a href="https://pycoders.com/" target="_blank" rel="noreferrer noopener">PyCoder’s weekly</a> for a weekly dose of Python news and others surrounding Python</li><li>Learning the tools in computer science through MIT’s <a href="https://missing.csail.mit.edu/" target="_blank" rel="noreferrer noopener">The Missing Semester of Your CS Education</a></li><li>Check out some conference tutorials or talks.<ul><li><a href="https://us.pycon.org/2020/online/" target="_blank" rel="noreferrer noopener">This year’s pycon</a></li><li><a href="https://www.youtube.com/results?search_query=pycon" target="_blank" rel="noreferrer noopener">Pycon youtube search</a></li><li><a href="https://www.youtube.com/results?search_query=raymond+hettinger+" target="_blank" rel="noreferrer noopener">Raymond Hettinger’s talks</a> - IMO one of the best speakers on python - here are some of my favorites that are great for beginners, so you can watch all of these immediately.<ul><li><a href="https://www.youtube.com/watch?v=UANN2Eu6ZnM" target="_blank" rel="noreferrer noopener">The Mental Game of Python</a></li><li><a href="https://www.youtube.com/watch?v=OSGv2VnC0go&amp;t=2371s" target="_blank" rel="noreferrer noopener">Transforming Code into Beautiful, Idiomatic Python</a> - great to learn language specific features of python if you already know some of c, java, etc this will show you how to write better python, and if you don’t then you still learn how to write great python code.</li><li><a href="https://www.youtube.com/watch?v=voXVTjwnn-U" target="_blank" rel="noreferrer noopener">Being a Core Developer in Python</a></li></ul></li><li><a href="https://github.com/orsanawwad/awesome-roadmaps" target="_blank" rel="noreferrer noopener">Awesome Roadmaps</a> - A curated list of awesome software development roadmaps<ul><li><a href="https://github.com/jwasham/coding-interview-university" target="_blank" rel="noreferrer noopener">Coding Interview University Roadmap</a> - This is a list of free resources to learn the content that a CS undergrad would learn in college</li><li><a href="https://github.com/kamranahmedse/developer-roadmap" target="_blank" rel="noreferrer noopener">Web developer roadmap 2019</a> - good starting places shows you lots of useful technologies</li><li><a href="https://github.com/Alikhll/golang-developer-roadmap" target="_blank" rel="noreferrer noopener">Go developer roadmap 2019</a></li><li><a href="https://github.com/togiberlin/ui-ux-designer-roadmap" target="_blank" rel="noreferrer noopener">UI/UX designer roadmap 2017</a></li><li><a href="https://github.com/utilForever/game-developer-roadmap" target="_blank" rel="noreferrer noopener">Game developer roadmap 2018</a></li><li><a href="https://github.com/floodsung/Deep-Learning-Papers-Reading-Roadmap" target="_blank" rel="noreferrer noopener">Deep Learning Papers Reading Roadmap</a></li><li><a href="https://github.com/BohdanOrlov/iOS-Developer-Roadmap" target="_blank" rel="noreferrer noopener">iOS developer in 2018</a></li><li><a href="https://github.com/godrm/mobile-developer-roadmap" target="_blank" rel="noreferrer noopener">Mobile developer in 2017</a></li><li><a href="https://github.com/adam-golab/react-developer-roadmap" target="_blank" rel="noreferrer noopener">React developer in 2019</a></li><li><a href="https://github.com/marekbrainhub/vue-developer-roadmap" target="_blank" rel="noreferrer noopener">Vue developer in 2019</a></li><li><a href="https://github.com/flaviocopes/vue-developer-roadmap" target="_blank" rel="noreferrer noopener">Vue.js developer in 2018</a></li><li><a href="https://github.com/aliyr/Nodejs-Developer-Roadmap" target="_blank" rel="noreferrer noopener">Node.js Developer Roadmap</a></li><li><a href="https://github.com/saifaustcse/.net-developer-roadmap" target="_blank" rel="noreferrer noopener">.net back-end Roadmap</a></li><li><a href="https://github.com/MoienTajik/AspNetCore-Developer-Roadmap" target="_blank" rel="noreferrer noopener">ASP.NET Core Developer roadmap in 2019</a></li><li><a href="https://github.com/MrMimic/data-scientist-roadmap" target="_blank" rel="noreferrer noopener">Data science roadmap</a></li><li><a href="https://github.com/Sundowndev/hacker-roadmap" target="_blank" rel="noreferrer noopener">Hacker roadmap</a></li><li><a href="https://github.com/AlaaAttya/software-architect-roadmap" target="_blank" rel="noreferrer noopener">Software architect roadmap</a></li><li><a href="https://github.com/sulco/angular-developer-roadmap" target="_blank" rel="noreferrer noopener">Angular Developer Roadmap</a></li><li><a href="https://github.com/ManzDev/roadmap-web-developer-2017" target="_blank" rel="noreferrer noopener">Front-end HTML5/CSS3/Javascript related technologies to learn in 2017</a></li><li><a href="https://github.com/anas-qa/Quality-Assurance-Road-Map" target="_blank" rel="noreferrer noopener">Software Quality Assurance Roadmap</a></li><li><a href="https://github.com/anacoimbrag/android-developer-roadmap" target="_blank" rel="noreferrer noopener">Android Developer Roadmap in 2019</a></li></ul></li><li>Software-adjacent areas<ul><li>Design/UX (<a href="https://hci.stanford.edu/courses/cs147/2019/au/" target="_blank" rel="noreferrer noopener">CS147</a>)</li><li>Product Manager</li><li>Project Manager</li><li>Sales for software</li></ul></li><li>Help a GitHub project</li><li>Learn about how a computer executes their code<ul><li><a href="https://www.nand2tetris.org/" target="_blank" rel="noreferrer noopener">NAND2Tetris</a></li><li><a href="https://eater.net/8bit" target="_blank" rel="noreferrer noopener">Build an 8 bit computer from scratch</a></li></ul></li><li>Learn how to build intelligence into real things outside computers<ul><li><a href="https://www.arduino.cc/en/Tutorial/HomePage?from=Main.Tutorials" target="_blank" rel="noreferrer noopener">Arduino tutorials</a></li></ul></li></ul></li></ul>